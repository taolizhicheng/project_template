import sys
import argparse

from project_template.database import add_template, update_template, delete_template, get_template, list_template_names
from project_template.instantiation import instantiate_project


def get_parser():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--add", action="store_true", help="add template")
    group.add_argument("--update", action="store_true", help="update template")
    group.add_argument("--delete", action="store_true", help="delete template")
    group.add_argument("--list", action="store_true", help="list all templates")
    group.add_argument("--instantiate", action="store_true", help="instantiate project from template")

    info_group = parser.add_argument_group("info")
    info_group.add_argument("--name", type=str, default=None, help="template name")
    info_group.add_argument("--project-dir", type=str, default=None, help="project directory for template/ project to be generated by template")
    info_group.add_argument("--save-dir", type=str, default=None, help="path to save template")
    return parser


def main():
    parser = get_parser()
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    args = parser.parse_args()
    if args.add:
        if args.name is None:
            parser._print_message("name is required", file=sys.stderr)
            return
        if args.project_dir is None:
            parser._print_message("project-dir is required", file=sys.stderr)
            return
        if args.save_dir is None:
            add_template(args.name, args.project_dir)
        else:
            add_template(args.name, args.project_dir, args.save_dir)
    elif args.update:
        if args.name is None:
            parser._print_message("name is required", file=sys.stderr)
            return
        if args.project_dir is None:
            parser._print_message("project-dir is required", file=sys.stderr)
            return
        if args.save_dir is None:
            update_template(args.name, args.project_dir)
        else:
            update_template(args.name, args.project_dir, args.save_dir)
    elif args.delete:
        if args.name is None:
            parser._print_message("name is required", file=sys.stderr)
            return
        delete_template(args.name)
    elif args.list:
        if args.name is None:
            template_names = list_template_names()
            print(template_names)
        else:
            project_dir, config = get_template(args.name)
            print(project_dir, config)
    elif args.generate:
        if args.name is None:
            parser._print_message("name is required", file=sys.stderr)
            return
        if args.project_dir is None:
            parser._print_message("project-dir is required", file=sys.stderr)
            return
        instantiate_project(args.name, args.project_dir)



if __name__ == "__main__":
    main()